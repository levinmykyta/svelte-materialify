---
title: Text Field Component
related:
  - TextField API: /api/TextField/
---

<script context="module">
  export async function preload() {
    let examples = await this.fetch('examples/components/textField.json');
    examples = await examples.json();
    return { examples }
  }
</script>

<script>
  import { Alert, API, Example } from '../../components';
  import { TextField as doc } from 'svelte-materialify-api/dist';
  import * as Examples from '../../examples/components/textField';
  export let examples;
</script>

# Text Fields

Text fields components are used for collecting user provided information.

<Alert type='info'>
All the properties which are not in the API list will be directly forwarded to the input element (such as maxlength).
</Alert>

## API

<API {doc} />

## Usage

<Example code={examples.variants} component={Examples.variants} />

## Examples

### Dense
<Example code={examples.dense} component={Examples.dense} />


### Disabled and Readonly

Text fields can be `disabled` or `readonly`.
<Example code={examples.disabled} component={Examples.disabled} />


### Icons

You can add icons to the text field with `prepend`, `append`, `prepend-outer` and `append-outer` slots.
<Example code={examples.icons} component={Examples.icons} />


### Clearable

When `clearable`, you can customize the clear icon with clear-icon.
<Example code={examples.clearable} component={Examples.clearable} />


### Counter

Use a `counter` prop to inform a user of the character limit. The counter does not perform any validation by itself. You will need to pair it with either the internal validation system, or a 3rd party library.
<Example code={examples.counter} component={Examples.counter} />


### Label

Text field label can be defined in the default slot.
<Example code={examples.label} component={Examples.label} />


### Password

A password input can be used with an appended icon and callback to control the visibility.
<Example code={examples.password} component={Examples.password} />

### Validation

Svelte Materialify provides inbuild simple validation through the `rules` prop. The prop accepts a array of callbacks with the input value as an arguement. By default this runs a check whenever the user types something, to delay the validation till the input loses focus use `validateOnBlur`.

```js
const rules = [
  (value) => {
    if (condition) return 'Error Message';
    return false;
  }
]
```

<Example code={examples.validation} component={Examples.validation} />
