---
title: Text Field Component
related:
  - Select: /components/selects/
  - Slider: /components/sliders/
  - TextField API: /api/TextField/
---

<script context="module">
  export async function preload() {
    let sources = await this.fetch('examples/TextField.json');
    sources = await sources.json();
    return { sources }
  }
</script>

<script>
  import Example, { setExamples } from '@/components/examples/Example.svelte';
  import * as Examples from '@/examples/TextField';
  export let sources;
  setExamples([sources, Examples]);
</script>

# Text Fields

Text fields components are used for collecting user provided information.

<Components.Alert type='info'>
All the properties which are not in the API list will be directly forwarded to the input element (such as maxlength).
</Components.Alert>

## API

- [TextField](/api/TextField/)

## Usage

<Example name="variants" />

## Examples

### Dense

You can reduces the text field height with `dense` prop.
<Example name="dense" />

### Disabled and Readonly

Text fields can be `disabled` or `readonly`.
<Example name="disabled" />

### Icons

You can add icons to the text field with `prepend`, `append`, `prepend-outer` and `append-outer` slots.
<Example name="icons" />

### Clearable

When `clearable`, you can customize the clear icon with clear-icon.
<Example name="clearable" />

### Counter

Use a `counter` prop to inform a user of the character limit. The counter does not perform any validation by itself. You will need to pair it with either the internal validation system, or a 3rd party library.
<Example name="counter" />

### Label

Text field label can be defined in the default slot.
<Example name="label" />

### Password

A password input can be used with an appended icon and callback to control the visibility.
<Example name="password" />

### Validation

Svelte Materialify provides inbuild simple validation through the `rules` prop. The prop accepts a array of callbacks with the input value as an arguement. By default this runs a check whenever the user types something, to delay the validation till the input loses focus use `validateOnBlur`.

```js
const rules = [
  (value) => {
    if (condition) return 'Error Message';
    return false;
  },
];
```

<Example name="validation" />
