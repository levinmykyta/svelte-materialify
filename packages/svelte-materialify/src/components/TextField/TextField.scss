@import "./variables";

label {
  max-width: 90%;
  overflow: hidden;
  text-overflow: ellipsis;
  top: $text-field-label-top;
  pointer-events: none;
  transform-origin: top left;

  &.active {
    max-width: 133%;
    transform: $text-field-label-active-transform;
  }
}

input {
  caret-color: inherit;
  flex: 1 1 auto;
  line-height: $text-field-line-height;
  padding: $text-field-padding;
  max-width: 100%;
  min-width: 0;
  width: 100%;
}

.s-text-field__input {
  display: flex;
  flex-grow: 1;
}

.s-text-field__wrapper {
  width: 100%;
  color: inherit;
  caret-color: currentColor;
  display: flex;
  align-items: center;

  // transition: 0.3s map-get($transitions, "swing");

  &::before,
  &::after {
    border-radius: inherit;
    width: inherit;
    bottom: -1px;
    content: "";
    left: 0;
    position: absolute;
    transition: 0.3s map-get($transitions, "swing");
    pointer-events: none;
  }

  &::before {
    border-color: var(--theme-text-fields-border);
    border-style: solid;
    border-width: thin 0 0 0;
  }

  &::after {
    border-color: currentColor;
    border-style: solid;
    border-width: thin 0 thin 0;
    transform: scaleX(0);
  }

  &:hover {
    &::before {
      border-color: var(--theme-text-primary);
    }
  }

  &:focus-within {
    &::after {
      transform: scale(1);
    }

    label {
      color: inherit;
    }
  }

  &.outlined {
    label {
      top: $text-field-outlined-label-top;

      &.active {
        padding: 0 4px;
        background-color: var(--theme-surface);
        transform: $text-field-outlined-label-active-transform;
      }
    }
  }

  &.filled {
    label {
      top: $text-field-filled-label-top;

      &.active {
        transform: $text-field-filled-label-active-transform;
      }
    }
  }
}

.outlined,
.solo,
.filled {
  padding: $text-field-wrapper-padding;
}

.filled,
.outlined {
  min-height: $text-field-filled-outlined-min-height;
}

.outlined,
.solo,
.rounded {
  &::after {
    display: none;
  }
}

.outlined,
.solo {
  border-radius: $text-field-border-radius;
}

.outlined {
  &::before {
    top: 0;
    border-width: thin;
  }

  &:focus-within::before {
    border-color: currentColor;
    border-width: 2px;
  }
}

.solo {
  min-height: $text-field-solo-min-height;
  @include elevation($text-field-solo-depth);

  &::before {
    display: none;
  }
}

.filled {
  border-radius: $text-field-filled-border-radius;
  background-color: var(--theme-text-fields-filled);

  &:hover {
    background-color: var(--theme-text-fields-filled-hover);
  }

  input {
    padding-top: $text-field-filled-margin-top;
  }
}

.rounded {
  border-radius: $text-field-rounded-border-radius;

  &.filled::before {
    border: none;
  }

  &.outlined {
    padding: $text-field-outlined-rounded-padding;
  }
}

.dense {
  input {
    padding: $text-field-dense-padding;
  }

  &.outlined,
  &.filled {
    min-height: $text-field-filled-outlined-dense-min-height;
  }

  &.outlined {
    label {
      top: $text-field-outlined-dense-label-top;

      &.active {
        transform: $text-field-outlined-dense-label-active-transform;
      }
    }
  }

  &.solo {
    min-height: $text-field-solo-dense-min-height;
  }

  &.filled {
    input {
      margin-top: $text-field-filled-margin-top / 2;
    }

    label {
      top: $text-field-filled-dense-label-top;

      &.active {
        transform: $text-field-filled-dense-label-active-transform;
      }
    }
  }
}

:global {
  .s-text-field {
    margin-top: 4px;
    padding-top: $text-field-label-top * 2;

    &.error,
    &.success {
      .s-text-field__wrapper::before {
        border-color: currentColor !important;
      }
    }
  }
}
